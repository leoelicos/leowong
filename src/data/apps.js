/* this page acts as the Single Source of Truth for my app metadata */

/* these pages have been integrated into monorepo */
import Moovee from '../pages/Moovee/index.jsx'
import OneTwoThreeGo from '../pages/Onetwothreego/index.jsx'
import Passo from '../pages/Passo/index.jsx'
import Kiddle from '../pages/Kiddle/index.jsx'
import Sytycj from '../pages/Sytycj/index.jsx'
import Jobby from '../pages/Jobby/index.jsx'
import Clima from '../pages/Clima/index.jsx'
import Locus from '../pages/Locus/index.jsx'
import Megen from '../pages/Megen/index.jsx'
import Docu from '../pages/Docu/index.jsx'
import Spriddle from '../pages/Spriddle/index.jsx'
import Emply from '../pages/Emply/index.jsx'
import Wants from '../pages/Wants/index.jsx'
import Algoz from '../pages/Algoz/index.jsx'
import Hourly from '../pages/Hourly/index.jsx'

const appData = {
  ingre: {
    endpoint: 'ingre',
    link: 'https://ingre.vercel.app/',
    code: 'https://github.com/leoelicos/ingre',
    title: 'ingr√©',
    description: 'A home shopping utility',
    keywords: ['mern', 'jwt', 'stripe'],
    background2: [255, 249, 247],
    background1: [255, 214, 201],
    color1: [181, 95, 38],
    color2: [0, 0, 0],
    userStory: ['As a developer, I want to create a MERN (MongoDB, Express.js, React, Node.js) stack single-page application that can effectively solve a real-world challenge, while focusing on user demand and utilizing real-world data.'],
    businessRequirements: ['Use React for the front end', 'Use GraphQL with a Node.js and Express.js server', 'Use MongoDB and the Mongoose ODM for the database', 'Use queries and mutations for retrieving, adding, updating, and deleting data', 'Deploy using Heroku (with data)', 'Have a polished UI', 'Be responsive', 'Be interactive (i.e., accept and respond to user input)', 'Include authentication (JWT)', 'Protect sensitive API key information on the server', 'Have a clean repository that meets quality coding standards (file structure, naming conventions, best practices for class and id naming conventions, indentation, high-quality comments, etc.)', 'Have a high-quality README (with unique name, description, technologies used, screenshot, and link to deployed application)'],
    changes: ['Added an external API called Edamam API'],
    apis: ['Edamam API'],
    frontEndTech: ['react', 'react router', 'apollo/client', 'ant design', 'jwt decode', 'react masonry css', 'pluralize', 'axios', 'stripe'],
    backEndTech: ['mongoose', 'express', 'apollo-server-express', 'graphql', 'stripe', 'jsonwebtoken', 'bcrypt', 'dotenv'],
    element: null
  },

  submitted: {
    endpoint: 'submitted',
    link: 'https://submitted-blog.herokuapp.com',
    code: 'https://github.com/leoelicos/submitted',
    title: 'submitted!',
    description: 'A student dev forum',
    keywords: ['mvc', 'sql', 'session'],
    background1: [38, 38, 38],
    background2: [166, 166, 166],
    color1: [0, 176, 80],
    color2: [255, 255, 255],
    userStory: ['As a tech writer, I want a CMS-style blog site that allows me to easily publish articles, blog posts, and my thoughts and opinions, so that I can share my knowledge and ideas with others.', 'The site should have a user-friendly interface that allows me to create and edit content, as well as manage comments and user engagement. It should also have customizable design options and be easily accessible to readers on various devices.'],
    businessRequirements: [
      'When I visit the site for the first time, I am presented with the homepage, which includes existing blog posts if any have been posted; navigation links for the homepage and the dashboard; and the option to log in',
      'When I click on the homepage option, I am taken to the homepage',
      'When I click on any other links in the navigation, I am prompted to either sign up or sign in',
      'When I choose to sign up, I am prompted to create a username and password',
      'When I click on the sign-up button, my user credentials are saved and I am logged into the site',
      ' When I revisit the site at a later time and choose to sign in, I am prompted to enter my username and password',
      '  When I am signed in to the site, I see navigation links for the homepage, the dashboard, and the option to log out',
      'When I click on the homepage option in the navigation, I am taken to the homepage and presented with existing blog posts that include the post title and the date created',
      "When I click on an existing blog post, I am presented with the post title, contents, post creator's username, and date created for that post and have the option to leave a comment",
      " When I enter a comment and click on the submit button while signed in, the comment is saved and the post is updated to display the comment, the comment creator's username, and the date created",
      'When I click on the dashboard option in the navigation, I am taken to the dashboard and presented with any blog posts I have already created and the option to add a new blog post',
      'When I click on the button to add a new blog post, I am prompted to enter both a title and contents for my blog post',
      'When I click on the button to create a new blog post, the title and contents of my post are saved and I am taken back to an updated dashboard with my new blog post',
      'When I click on one of my existing posts in the dashboard, I am able to delete or update my post and taken back to an updated dashboard',
      'When I click on the logout option in the navigation, I am signed out of the site',
      'When I am idle on the site for more than a set time, I am able to view comments but I am prompted to log in again before I can add, update, or delete comments'
    ],
    changes: ['I seeded the site with lots of relevant dev articles and added interesting quotes'],
    apis: [],
    frontEndTech: [],
    backEndTech: ['bcrypt', 'connect-session-sequelize', 'dotenv', 'express', 'express-handlebars', 'express-session', 'mysql2', 'sequelize'],
    element: null
  },

  kiddin: {
    endpoint: 'kiddin',
    link: 'https://kiddin.onrender.com',
    code: 'https://github.com/leoelicos/just-kidding',
    title: "kiddin'",
    description: 'A baby picture forum',
    keywords: ['collab', 'mvc', 'multer'],
    background1: [255, 182, 209],
    background2: [255, 233, 246],
    color1: [23, 73, 77],
    color2: [61, 141, 174],
    userStory: ["As a potential employer, I want to be able to view a full-stack application that showcases the developer's ability to implement a real-world solution using a variety of technologies and programming languages. This will enable me to assess the developer's skills and experience and make an informed decision on whether to hire them for a particular role. The application should demonstrate proficiency in front-end and back-end development, as well as database management and deployment techniques."],
    businessRequirements: ['Create a RESTful API using Node.js and Express.js', 'Use Handlebars.js as the template engine', 'Use MySQL and the Sequelize ORM for the database', 'Include GET and POST routes for retrieving and adding new data', "Use at least one new library, package, or technology that we haven't discussed", 'Follow the MVC paradigm in the folder structure', 'Include authentication (express-session and cookies)', 'Protect API keys and sensitive information with environment variables', 'Deploy using Heroku (with data)', 'Create a polished UI that is responsive and interactive', 'Follow good-quality coding standards'],
    changes: ['We added multer to support file uploading'],
    apis: [],
    frontEndTech: [],
    backEndTech: ['bcrypt', 'connect-session-sequelize', 'dotenv', 'express', 'express-handlebars', 'express-session', 'multer', 'mysql2', 'sequelize'],
    element: null
  },
  moovee: {
    endpoint: 'moovee',
    link: '/moovee',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/Moovee',
    title: 'MOOVEE',
    description: 'A trailer search',
    keywords: ['collab', 'gapi', 'omdb'],
    background1: [38, 38, 27],
    background2: [166, 166, 166],
    color1: [255, 255, 255],
    color2: [237, 125, 49],
    userStory: ['As a developer, I want to solve a real-world problem by integrating data received from multiple server-side API requests using agile development methodologies to work collaboratively. I want to use git branch workflow and pull requests to implement feature and bug fixes.'],
    businessRequirements: ['Use a CSS framework other than Bootstrap', 'Deploy to GitHub Pages', 'Make interactive with user input', 'Use at least 2 server-side APIs', 'No alerts, confirms or prompts - use modals', 'Use client-side storage for persistent data', 'Make responsive', 'Have a polished UI', 'Have a clean repository that meets coding standards', 'Have a quality README'],
    changes: ['I refactored the vanilla Javascript into React'],
    apis: ['youtube v3 search', 'omdb api', 'tmdb api'],
    frontEndTech: ['react'],
    backEndTech: [],
    element: <Moovee />
  },
  shopr: {
    endpoint: 'shopr',
    link: 'https://snapfire-shop.herokuapp.com/',
    code: 'https://github.com/leoelicos/snapfire-shop',
    title: 'Shopr',
    description: 'A fast shopping cart',
    keywords: ['mern', 'pwa', 'stripe'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ["As a senior engineer working on an e-commerce platform, I want to migrate my platform's state management from the Context API to Redux. The switch to Redux will enable me to manage the platform's global state outside of the React ecosystem, improving the platform's performance and scalability."],
    businessRequirements: ['The app uses a Redux store instead of the Context API', 'The app uses a Redux provider', 'The app passes reducers to a Redux store instead of using the Context API', 'The app uses Redux instead of the Context API', 'The app dispatches actions using Redux instead of the Context API'],
    changes: ['I implemented progressive web api functionality so that it continues working offline'],
    apis: ['stripe'],
    frontEndTech: ['@apollo/client', '@stripe/stripe-js', 'graphql', 'jwt-decode', 'react', 'react-dom', 'react-redux', 'react-router-dom', 'redux', 'web-vitals'],
    backEndTech: ['apollo-server-express', 'bcrypt', 'express', 'graphql', 'jsonwebtoken', 'mongoose', 'stripe'],
    element: null
  },
  readr: {
    endpoint: 'readr',
    link: 'https://leoelicos-googlebooks.herokuapp.com',
    code: 'https://github.com/leoelicos/book-search-engine',
    title: 'Readr',
    description: 'A book search engine',
    keywords: ['gql', 'jwt', 'bootstrap'],
    background1: [125, 188, 234],
    background2: [255, 255, 255],
    color1: [34, 42, 53],
    color2: [255, 255, 255],
    userStory: ['As an avid reader, I want to search for new books to read and add them to my wishlist, so that I can keep track of books I want to purchase.'],
    businessRequirements: [
      'Given a book search engine, when I load the search engine, I am presented with a menu with the options Search for Books and Login/Signup and an input field to search for books and a submit button.',
      'When I click on the Search for Books menu option, I am presented with an input field to search for books and a submit button.',
      "When I am not logged in and enter a search term in the input field and click the submit button, I am presented with several search results, each featuring a book's title, author, description, image, and a link to that book on the Google Books site.",
      'When I click on the Login/Signup menu option, a modal appears on the screen with a toggle between the option to log in or sign up.',
      'When the toggle is set to Signup, I am presented with three inputs for a username, an email address, and a password, and a signup button.',
      'When the toggle is set to Login, I am presented with two inputs for an email address and a password and login button.',
      'When I enter a valid email address and create a password and click on the signup button, my user account is created and I am logged in to the site.',
      "When I enter my account's email address and password and click on the login button, the modal closes and I am logged in to the site.",
      'When I am logged in to the site, the menu options change to Search for Books, an option to see my saved books, and Logout.',
      "When I am logged in and enter a search term in the input field and click the submit button, I am presented with several search results, each featuring a book's title, author, description, image, and a link to that book on the Google Books site and a button to save a book to my account.",
      "When I click on the Save button on a book, that book's information is saved to my account.",
      "When I click on the option to see my saved books, I am presented with all of the books I have saved to my account, each featuring the book's title, author, description, image, and a link to that book on the Google Books site and a button to remove a book from my account.",
      'When I click on the Remove button on a book, that book is deleted from my saved books list.',
      'When I click on the Logout button, I am logged out of the site and presented with a menu with the options Search for Books and Login/Signup and an input field to search for books and a submit button.'
    ],
    changes: [],
    apis: ['google books'],
    frontEndTech: ['@apollo/client', 'bootstrap', 'graphql', 'jwt-decode', 'react', 'react-bootstrap', 'react-dom', 'react-router-dom', 'react-scripts'],
    backEndTech: ['apollo-server-express', 'bcrypt', 'dotenv', 'express', 'graphql', 'jsonwebtoken', 'mongoose'],
    element: null
  },
  onetwothreego: {
    endpoint: 'onetwothreego',
    link: '/onetwothreego',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/onetwothreego',
    title: '123Go',
    description: "A classic children's game",
    keywords: ['react'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a user, I want to play Rock, Paper, Scissors against an automated opponent. The game should allow me to enter R, P, or S to signify my choice of rock, paper, or scissors. Additionally, I expect the computer to choose R, P, or S in return. After each round, I want to see my total wins, ties, and losses. Also, I want the option to play again whether I win or lose.'],
    businessRequirements: ['Use `alert()`, `confirm()`, and `prompt()` methods to collect user input and display information to the user.', "The computer's selection must be random to ensure a fair game."],
    changes: ['I refactored vanilla JS into React'],
    apis: [],
    frontEndTech: ['react'],
    backEndTech: [],
    element: <OneTwoThreeGo />
  },
  passo: {
    endpoint: 'passo',
    link: '/passo',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/Passo',
    title: 'Passo',
    description: 'A password generator',
    keywords: ['antd', 'react'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a user, I want to be able to generate a random password that meets certain criteria, so that I can have a strong password for better security.'],
    businessRequirements: ['Given I need a new, secure password', 'When I click the button to generate a password', 'Then I am presented with a series of prompts for password criteria', 'When prompted for password criteria, then I select which criteria to include in the password', 'When prompted for the length of the password, then I choose a length of at least 8 characters and no more than 128 characters', 'When asked for character types to include in the password, then I confirm whether or not to include lowercase, uppercase, numeric, and/or special characters', 'When I answer each prompt, then my input should be validated and at least one character type should be selected', 'When all prompts are answered, then a password is generated that matches the selected criteria', 'When the password is generated, then the password is either displayed in an alert or written to the page'],
    changes: ['I refactored vanilla JS into React'],
    apis: [],
    frontEndTech: ['react'],
    backEndTech: [],
    element: <Passo />
  },
  kiddle: {
    endpoint: 'kiddle',
    link: '/kiddle',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/Kiddle',
    title: 'Kiddle',
    description: 'A Wordle for kids',
    keywords: ['react'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a user, I want to be able to start the game by clicking on a button.', 'As a user, I want to try and guess a word by filling in a number of blanks that match the number of letters in that word.', 'As a user, I want the game to be timed.', 'As a user, I want to win the game when I have guessed all the letters in the word.', 'As a user, I want to lose the game when the timer runs out before I have guessed all the letters.', 'As a user, I want to see my total wins and losses displayed on the screen.'],
    businessRequirements: ["The user's guess should be captured as a key event.", 'When a user correctly guesses a letter, the corresponding blank should be replaced by the letter.', 'When a user wins or loses a game, a message should appear and the timer should stop.', 'When a user clicks the start button, the timer should reset.', 'When a user refreshes or returns to the brower page, the win and loss counts should persist.'],
    changes: ['I refactored the vanilla JS into React'],
    apis: [],
    frontEndTech: ['react'],
    backEndTech: [],
    element: <Kiddle />
  },
  syt: {
    endpoint: 'sytycj',
    link: '/sytycj',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/syt',
    title: 'SYTYCJ',
    description: 'A Javascript quiz',
    keywords: ['react'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a coding boot camp student, I want to take a timed quiz on JavaScript fundamentals that stores high scores so that I can gauge my progress compared to my peers.'],
    businessRequirements: ['When I click the start button, a timer starts and I am presented with a question.', 'When I answer a question, I am presented with another question.', 'When I answer a question incorrectly, time is subtracted from the clock.', 'When all questions are answered or the timer reaches 0, the game is over.', 'When the game is over, I can save my initials and my score.'],
    changes: ['I refactored the vanilla JS into React'],
    apis: [],
    frontEndTech: ['react'],
    backEndTech: [],
    element: <Sytycj />
  },
  jobby: {
    endpoint: 'jobby',
    link: '/jobby',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/Jobby',
    title: 'Jobby',
    description: 'A project tracker',
    keywords: ['react'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a user, I want to be greeted with the current time and date, along with instructions on how to use the app. I also want a button that opens a dialog box so that I can enter the details of a project, such as the name, type, hourly wage, and due date. Additionally, I want to view a table that displays the project name, type, hourly wage, due date, days until the due date, and estimated total earnings. Finally, I want the ability to delete a project from the table.'],
    businessRequirements: [
      'The header/hero area must use Moment.js with `setInterval()`.',
      'The instructions of how to use the app must be a Bootstrap card component.',
      'The modal dialog must be a Bootstrap modal component.',
      "The due date must use jQuery UI's datepicker with a minimum date setting in place.",
      'The table must be a Bootstrap table.',
      'The days until the due date must use Moment.js to calculate.',
      'Any elements you need to interact with using JavaScript/jQuery are properly identified (e.g., form elements, the table body, etc.).',
      'Use different `<input>` element attributes to help enforce rules, like different `type` attribute values, minimum values, and required.',
      "The form's input elements must be captured using jQuery, and on submit , use that data to create a new table row.",
      `Select and save references to every DOM element we will interact with to a variable (i.e., \`var projectFormEl = $("#project-form");\`) so that we can use these elements later.`,
      'Attach a submit event listener to the `<form>` element using jQuery.',
      'On submission, capture the four input values from the form and pass them to another function to handle printing project data.',
      'The table should have a final column without a name that uses jQuery event delegation to attach an event listener to a button in each row so that when clicked, the parent `<tr>` element will be removed from the page.'
    ],
    changes: ['I refactored the bootstrap table into AntD form', 'I refactored the vanilla JS into React'],
    apis: [],
    frontEndTech: ['react', 'antd'],
    backEndTech: [],
    element: <Jobby />
  },
  hourly: {
    endpoint: 'hourly',
    link: '/hourly',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/Hourly',
    title: 'Hourly',
    description: 'An hourly task manager',
    keywords: [],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ["As a busy employee, I want to be able to add important events to a daily planner so that I can manage my time effectively. I want to be able to view the current day's date at the top of the planner. I want the planner to display time slots for standard business hours. I want to be able to save events to each time slot, and the events should persist even after the page is refreshed. The time slots should be color-coded based on whether they are in the past, present, or future, making it easy to see what events are coming up and which ones have already passed."],
    businessRequirements: ['The current day is displayed at the top of the calendar', 'Timeblocks for standard business hours are displayed', 'Each timeblock is color coded to indicate whether it is in the past, present, or future', 'The user can enter an event into a timeblock', 'The event is saved in local storage', 'The event persists after the page is refreshed'],
    changes: ['I added a clock', 'I added weather with Openweathermap', 'I refactored the vanilla JS into React'],
    apis: ['openweathermap'],
    frontEndTech: ['react'],
    backEndTech: [],
    element: <Hourly />
  },
  clima: {
    endpoint: 'clima',
    link: '/clima',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/Clima',
    title: 'Clima',
    description: 'A weather dashboard',
    keywords: ['react', 'openweather', 'SVG'],
    background1: [81, 61, 110],
    background2: [203, 197, 212],
    color1: [255, 255, 255],
    color2: [217, 217, 217],
    userStory: ['As a traveler, I want to view the weather outlook for multiple cities so that I can plan a trip accordingly.'],
    businessRequirements: ['Given a weather dashboard with form inputs, when I search for a city, then I am presented with current and future conditions for that city and that city is added to the search history.', 'When I view current weather conditions for that city, then I am presented with the city name, the date, an icon representation of weather conditions, the temperature, the humidity, the wind speed, and the UV index.', 'When I view the UV index, then I am presented with a color that indicates whether the conditions are favorable, moderate, or severe.', 'When I view future weather conditions for that city, then I am presented with a 5-day forecast that displays the date, an icon representation of weather conditions, the temperature, the wind speed, and the humidity.', 'When I click on a city in the search history, then I am again presented with current and future conditions for that city.'],
    changes: ['I made dynamic SVG for each weather data', 'I refactored the vanilla JS into react'],
    apis: ['openweather'],
    frontEndTech: ['react', 'openweathermap'],
    backEndTech: [],
    element: <Clima />
  },
  locus: {
    endpoint: 'locus',
    link: '/locus',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/Locus',
    title: 'LOCus',
    description: 'A library search tool',
    keywords: ['react'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a user, I can submit a search query from the application to request data and receive a response from the Library of Congress. I can either perform a generic search for data in all formats or I can select a format in the form to help filter results. Additionally, I can see all of the results of my search displayed on a separate page. I am also able to conduct additional searches from the results page.'],
    businessRequirements: [
      'HOMEPAGE',
      'A simple, well thought-out UI.',
      'A form with a text input field to capture a search query and an option select dropdown to capture the format of the search query.',
      'The options in the dropdown should be a list of the possible format values.',
      "A browser event listener attached to the form to execute a function on submission, which will capture both form values and redirect the user to a search results page with those values included in the URL as query parameters. This will use the browser's `location.replace()` method.",
      'If there is no format selected from the dropdown, the URL should look something like the following example: /search-results.html?q=dogs&format.',
      'If there is a format selected from the dropdown, the URL should look something like the following example: /search-results.html?q=dogs&format=photos.',

      'SEARCH RESULTS PAGE',
      'On page load, if there are query parameters, immediately parse them and use them in a request URL to fetch data from the Library of Congress API.',
      'If there is a value for the format query parameter, use the format endpoint to search for something based on the chosen format.',
      'If there is no value for the format query parameter, use the search endpoint to search for all types of data.',
      'The response from the API request will then be displayed on the page. It is up to you and your team to determine which data should be displayed from the overall `response` object, but you must use data from the `results` property in the `response` object.',
      'The same form from the homepage should be here as well. Instead of redirecting a user to another page, however, it will perform a search right on the page and display the new results.'
    ],
    changes: ['I refactored the vanilla JS into React'],
    apis: ['library of congress api'],
    frontEndTech: ['react'],
    backEndTech: [],
    element: <Locus />
  },

  megen: {
    endpoint: 'megen',
    link: '/megen',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/Megen',
    title: 'Megen',
    description: 'An about me generator',
    keywords: ['react', 'iframe'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a user, I want to be prompted for information like my name, location, bio, LinkedIn URL, and GitHub URL.'],
    businessRequirements: ['Construct an HTML document', 'Write document to file system', 'Add CSS styling to document', 'Use `fs` for writing to file system', 'Use `inquirer` for collecting user input', 'Use string template literals to generate string version of the HTML document'],
    changes: ['I rewrote the backend command line into a React front end'],
    apis: [],
    frontEndTech: ['react', 'iframe'],
    backEndTech: [],
    element: <Megen />
  },
  docu: {
    endpoint: 'docu',
    link: '/docu',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/Docu',
    title: 'Docu',
    description: 'A readme generator',
    keywords: ['react', ''],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a developer, I want to quickly create a professional README for a new project using a README generator.'],
    businessRequirements: ['The README should have a title', 'The README should have a Description section', 'The README should have a Table of Contents', 'The README should have an Installation section', 'The README should have a Usage section', 'The README should have a License section', 'The README should have a Contributing section', 'The README should have a Tests section', 'The README should have a Questions section', 'The title should be the same as the project title', 'The Description, Installation, Usage, Contributing, and Tests sections should include the user input', 'The License section should include a badge for the chosen license and a notice explaining which license the application is covered under', 'The Questions section should include the GitHub username with a link to the GitHub profile and the email address'],
    changes: ['I rewrote the backend command line into a React front end'],
    apis: [],
    frontEndTech: ['react', 'marked-react', 'antd'],
    backEndTech: [],
    element: <Docu />
  },
  spriddle: {
    endpoint: 'spriddle',
    link: '/spriddle',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/Spriddle',
    title: 'Spriddle',
    description: 'A timed riddle game',
    keywords: ['react', 'fun'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a user, I want to be able to play a word-guessing game from the command line, where the game randomly selects a word from a list of words, prompts the user to guess a letter in the word, and provides feedback if the letter is correct or incorrect. The game should keep track of the number of incorrect guesses and end the game if the user guesses the word or reaches the maximum number of incorrect guesses allowed. The user should also have the option to quit the game at any time.'],
    businessRequirements: ['The `Letter` and `Word` classes must fulfill the tests in the `tests` folder.', 'When the user runs `npm start`, they can play the game.'],
    changes: ['I rewrote the backend command line into a React front end'],
    apis: [],
    frontEndTech: ['react'],
    backEndTech: [],
    element: <Spriddle />
  },
  emply: {
    endpoint: 'emply',
    link: '/emply',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/Emply',
    title: 'Emply',
    description: 'A team visualizer',
    keywords: ['react'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ["As a manager, I want to generate a webpage that displays my team's basic information, including name, job title, email, and GitHub profile, so that I have quick access to their details. The webpage should be generated using a Node.js command-line application that prompts the user to enter information for each team member, including the manager, engineers, and interns. Each team member's information should be displayed in a card format on the webpage, including their name, job title, email, and GitHub profile. The application should validate the input provided by the user and ensure that each team member has a unique email address. Finally, the webpage should be generated as an HTML file in the output folder, with styling provided by CSS."],
    businessRequirements: [
      "The application should prompt the user for a manager's name, ID, email, and office number",
      'The application should then give the user the option of adding an engineer or intern, or finishing their team',
      "If the user chooses to add an engineer, they should be prompted for the engineer's name, ID, email, and GitHub username",
      "If the user chooses to add an intern, they should be prompted for the intern's name, ID, email, and school",
      'Once the user has finished adding team members, the application should generate an HTML file that displays a formatted team roster',
      "The HTML file should include the manager's name, ID, email, and office number. It should also include the name, ID, email, and GitHub username of each engineer on the team, and the name, ID, email, and school of each intern on the team.",
      "Clicking on an email address in the HTML file should open the user's default email program and populate the TO field of the email with the address",
      'Clicking on a GitHub username in the HTML file should open that GitHub profile in a new tab'
    ],
    changes: ['I refactored the file generator into a React Front End that saves to local history'],
    apis: [],
    frontEndTech: ['react'],
    backEndTech: [],
    element: <Emply />
  },

  writr: {
    endpoint: 'writr',
    link: 'https://leoelicos-note-taker.herokuapp.com/    ',
    code: 'https://github.com/leoelicos/bcs-11-note-taker',
    title: 'Writr',
    description: 'A server persistent notepad',
    keywords: ['ssr', 'express', 'bootstrap'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a small business owner, I want to have access to a note-taking application that allows me to write and save notes, so that I can keep track of tasks, organize my thoughts, and plan my work effectively. The application should allow me to create, edit, and delete notes, as well as categorize them based on topic or priority. Additionally, the application should have a search functionality that allows me to find specific notes quickly and easily. The notes should be stored securely and be accessible from any device with an internet connection, so that I can access them whenever I need to.'],
    businessRequirements: ['The note taker has a landing page with a link to the notes page', 'The notes page has a list of existing notes in the left column, and empty fields to enter a new note in the right column', 'When a new note is entered, a save icon appears in the navigation, and the note is saved and appears in the left column', 'When an existing note is clicked, it appears in the right column'],
    changes: [],
    apis: [],
    frontEndTech: [],
    backEndTech: ['express', 'uuid'],
    element: null
  },
  devtips: {
    endpoint: 'devtips',
    link: 'https://leoelicos-diagnostic-routes.herokuapp.com',
    code: 'https://github.com/leoelicos/bcs-11-diagnostic-routes',
    title: 'DevTips',
    description: 'A dev forum',
    keywords: ['ssr', 'express', 'uuid'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a developer, I want to be able to add routes to an existing application, so that I can create new pages and resources that are accessible through the application.', "As a developer, I want to serve up a custom 404 page when the requested resource doesn't exist, so that users can be directed to a relevant page and not be presented with a default error message.", "As a developer, I want to log usage statistics from users of my site, so that I can track user behavior and use the data to improve the site's performance.", 'As a developer, I want to be able to deploy my apps to Heroku, so that my applications can be easily and efficiently deployed to a cloud-based platform.'],
    businessRequirements: ['Create a wildcard route in `server.js` that will send the users to a 404 page.', 'Create a custom `404.html` page for the wildcard route to serve.', 'Create a POST route for `/api/diagnostics` that will store information about the invalid form submissions.', 'Create a GET route for `/api/diagnostics` that will return the content of `db/diagnostics/json`.', 'Create a `fetch()` request on the front end that will send a POST request to `/api/diagnostics` every time a user attempts to submit an invalid form.', 'Test `/api/diagnostics` endpoint using Insomnia.', 'Test the wildcard route by visiting any non-existent path, like `http://localhost/test`.', 'Deploy the finished application to Heroku.'],
    changes: [],
    apis: [],
    frontEndTech: [],
    backEndTech: ['express', 'uuid'],
    element: null
  },
  depto: {
    endpoint: 'depto',
    link: 'https://employees-api.herokuapp.com/api/employees',
    code: 'https://github.com/leoelicos/bcs-12-employee-management-system',
    title: 'Depto',
    description: 'An employee CMS backend',
    keywords: ['express', 'mysql2'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a business owner, I want to be able to view and manage the departments, roles, and employees in my company. Specifically, I want to be able to add, edit, and delete departments, roles, and employees. I also want to be able to assign roles to employees and set their salaries. Additionally, I want to be able to view reports and analytics on employee performance and business operations, and generate custom reports based on selected parameters. This system should allow me to organize and plan my business more efficiently.'],
    businessRequirements: [
      'When starting the application, present the user with the following options: View all departments, View all roles, View all employees, Add a department, Add a role, Add an employee, Update an employee role',
      'If the user selects to view all departments, present a formatted table showing department names and ids.',
      'If the user selects to view all roles, present a table showing job titles, role ids, department, and salary for each role.',
      'If the user selects to view all employees, present a formatted table showing employee data, including employee ids, first names, last names, job titles, departments, salaries, and managers that the employees report to.',
      'If the user selects to add a department, prompt them to enter the name of the department and add it to the database.',
      'If the user selects to add a role, prompt them to enter the name, salary, and department for the role and add it to the database.',
      "If the user selects to add an employee, prompt them to enter the employee's first name, last name, role, and manager, and add it to the database.",
      'If the user selects to update an employee role, prompt them to select an employee to update and their new role, and update this information in the database.'
    ],
    changes: [],
    apis: [],
    frontEndTech: [],
    backEndTech: ['cors', 'dotenv', 'express', 'mysql2'],
    element: null
  },
  cinem: {
    endpoint: 'cinem',
    link: 'https://movies-api-9x92.herokuapp.com/api/movies',
    code: 'https://github.com/leoelicos/bcs-12-movie-database',
    title: 'Cinem',
    description: 'A movie database backend',
    keywords: ['express', 'mysql2'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a user, I want to create a new database.', 'As a user, I want to store movie names and reviews in the database in two separate tables.', 'As a user, I want to see a list of all movies.', 'As a user, I want to be able to create and delete a movie.', 'As a user, I want to return a list of all the reviews and the associated movie name.'],
    businessRequirements: ['Create a `movie_db` database', 'Create a `movies` table and a `reviews` table in `movie_db`', 'Seed the `movie_db` with data', 'The `/api/movies` route renders a list of all movies', 'The `/api/add-movie` route successfully adds a movie when tested using Insomnia', 'The `/api/update-review` route successfully updates a movie when tested using Insomnia', 'The `/api/movie/:id` route deletes a route when tested using Insomnia'],
    changes: [],
    apis: [],
    frontEndTech: [],
    backEndTech: ['express', 'mysql2'],
    element: null
  },
  taggr: {
    endpoint: 'taggr',
    link: '',
    code: 'https://github.com/leoelicos/bcs-13-ecommerce-back-end',
    title: 'Taggr',
    description: 'An ecommerce back end',
    keywords: ['sequelize', 'express', 'mysql2'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ["As a manager at an internet retail company, I want to update my e-commerce website's backend with the latest technologies so that my company can stay competitive in the market. The backend should include features such as advanced search and filtering, customer management, inventory management, and support for multiple payment gateways. Additionally, the backend should be scalable and flexible enough to handle future updates and changes to the website's functionality."],
    businessRequirements: ['Given a functional Express.js API, when I add my database name, MySQL username, and MySQL password to an environment variable file, then I am able to connect to a database using Sequelize.', 'When I enter schema and seed commands, then a development database is created and is seeded with test data.', 'When I enter the command to invoke the application, then my server is started and the Sequelize models are synced to the MySQL database.', 'When I open API GET routes in Insomnia for categories, products, or tags, then the data for each of these routes is displayed in a formatted JSON.', 'When I test API POST, PUT, and DELETE routes in Insomnia, then I am able to successfully create, update, and delete data in my database.'],
    changes: [],
    apis: [],
    frontEndTech: [],
    backEndTech: ['cors', 'dotenv', 'express', 'mysql2', 'sequelize'],
    element: null
  },
  wander: {
    endpoint: 'wander',
    link: 'https://leoelicos-trips-database.herokuapp.com/api/trips',
    code: 'https://github.com/leoelicos/bcs-13-trips-database',
    title: 'Wander',
    description: 'A trips database backend',
    keywords: ['express', 'mysql2', 'sequelize'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a traveller, I want to be able to create an account.', 'As a traveller, I want to be able to create a new trip for myself using a location from a list.', 'As a traveller, I want to be able to create and view location data.', "As a traveller, I want to be able to view all of the trips I'm taking, along with their locations."],
    businessRequirements: [
      'The GET route `/api/travellers` must return all traveller data without associated trips in Insomnia.',
      'The POST route `/api/travellers` must create traveller data and return a successful response in Insomnia.',
      "The GET route `/api/travellers/:id` must return a single traveller's data with their associated trips and a list of locations in Insomnia.",
      'The DELETE route `/api/travellers/:id` must remove a traveller and any trips associated with them and return a successful response in Insomnia.',
      'The GET route `/api/locations` must return all location data in Insomnia.',
      'The POST route `/api/locations` must create location data and return a successful response in Insomnia.',
      "The GET route `/api/locations/:id` must return a single location's data, with its associated trips, in Insomnia.",
      'The DELETE route `/api/locations/:id` must remove a location and any trips associated with it and return a successful response in Insomnia.',
      'The POST route `/api/trips` must create trip data between associated travellers and locations.',
      'The DELETE route `/api/trips/:id` must remove a trip and return a successful response in Insomnia.',
      'The API must be successfully deployed to Heroku with a MySQL database.'
    ],
    changes: [],
    apis: [],
    frontEndTech: [],
    backEndTech: ['bcrypt', 'dotenv', 'express', 'mysql2', 'sequelize'],
    element: null
  },

  fundr: {
    endpoint: 'fundr',
    link: 'https://projects-api-v0.herokuapp.com/',
    code: 'https://github.com/leoelicos/bcs-14-crowdfunding-app',
    title: 'Fundr',
    description: 'A crowdfunding backend',
    keywords: ['handlebars', 'session', 'mysql2'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a user, I want to be able to view a list of current projects seeking funding, so that I can explore and discover new projects that interest me.', 'As a user, I want to be able to create an account, so that I can save and manage my favorite projects, receive updates, and contribute to funding.', 'As a registered user, I want to be able to post my own projects to ask for funding, so that I can raise funds and bring my ideas to life.'],
    businessRequirements: [
      'The `/` homepage route renders a list of all projects from the database.',
      "The `/project/:id` route renders an individual project's details based on the route parameter id.",
      'The `/login` route renders a form to log in and a form to create a new account.',
      'An existing user can enter their credentials on the login page to create a session on the server.',
      'A new user can create an account on the login page and then be immediately logged in with a session.',
      "The `/profile` route renders the logged-in user's projects and a form to create a new project.",
      'Only a logged in user can visit the `/profile` route.',
      'A logged in user is redirected to `/profile` when they try to visit `/login` again.',
      'A user on the profile page can use the form to create a new project in the database.',
      'A user on the profile page can select a "Delete" button to remove their project from the database.',
      'A logged-in user can select a "Logout" button to remove their session.',
      'The API routes to create and delete posts are protected from non logged-in users.',
      'The code is organized using MVC architecture.',
      'The views are rendered with Handlebars.js templates.'
    ],
    changes: [],
    apis: [],
    frontEndTech: [],
    backEndTech: ['bcrypt', 'connect-session-sequelize', 'dotenv', 'express', 'express-handlebars', 'express-session', 'mysql2', 'sequelize'],
    element: null
  },

  regexpo: {
    endpoint: 'regexpo',
    link: 'https://gist.github.com/leoelicos/5d8dfb511b682fc5894688d54cfb5a73',
    code: '',
    title: 'RegExpo',
    description: 'A regex tutorial',
    keywords: ['regex', 'gist', 'mermaid'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a web development student, I want a tutorial that explains a specific regex.', 'The tutorial should help me understand the search pattern defined by the regex.'],
    businessRequirements: ['The tutorial has a descriptive title and introductory paragraph explaining the purpose of the tutorial', 'The tutorial has a summary describing the regex featured in the tutorial', 'The tutorial has a table of contents linking to different sections that break down each component of the regex and explain what it does', "The tutorial has a section about the author with a link to the author's GitHub profile", 'When I click on the links in the table of contents, I am taken to the corresponding sections of the tutorial', 'When I read through each section of the tutorial, I find a detailed explanation of what a specific component of the regex does', "When I reach the end of the tutorial, I find a section about the author and a link to the author's GitHub profile"],
    changes: ['I published the gist on GitHub Gists', 'I added a Mermaid sequence diagram'],
    apis: [],
    frontEndTech: [],
    backEndTech: [],
    element: null
  },
  grader: {
    endpoint: 'grader',
    link: 'https://students-api-sqma.onrender.com/',
    code: 'https://github.com/leoelicos/students-api',
    title: 'Grader',
    description: 'A student grades api',
    keywords: ['cors', 'express', 'mongoose'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a user, I want to be able to view all the students and get a total count of the number of students enrolled.', "As a user, I want to be able to view a specific student's overall grade in the class using MongoDB operators and their score on each assignment.", 'As a user, I want to be able to execute create, read, update, and delete operations on courses, students, and assignments.'],
    businessRequirements: ['Use MongoDB, Mongoose, and Express', 'Seed the database with sample data', 'Create an aggregate function for headcount that uses MongoDB operators', 'Create an aggregate function for grade that uses MongoDB operators', 'Test the endpoints with Insomnia', 'Deploy using Heroku and MongoDB Atlas'],
    changes: ['I deployed it to Render for faster load'],
    apis: [],
    frontEndTech: [],
    backEndTech: ['cors', 'express', 'mongoose'],
    element: null
  },
  matey: {
    endpoint: 'matey',
    link: 'https://social-network-api-v4ec.onrender.com/api/users',
    code: 'https://github.com/leoelicos/snapi',
    title: 'Matey',
    description: 'A social network back end',
    keywords: ['express', 'mongoose', 'validator'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a social media startup, I want to have an API for my social network that utilizes a NoSQL database, so that my website can handle large amounts of unstructured data.'],
    businessRequirements: ["The application's server is started", 'The Mongoose models are synced to the MongoDB database', 'The data for each API GET route is displayed in a formatted JSON', 'API POST, PUT, and DELETE routes are successfully able to create, update, and delete users and thoughts in the database', "API POST and DELETE routes are successfully able to create and delete reactions to thoughts and add and remove friends to a user's friend list"],
    changes: ['I deployed it to Render for faster load', 'I added a seed file with Harry, Ron and Hermione'],
    apis: [],
    frontEndTech: [],
    backEndTech: ['cors', 'express', 'mongoose', 'validator'],
    element: null
  },
  clist: {
    endpoint: 'clist',
    link: 'https://contact-list.herokuapp.com',
    code: 'https://github.com/leoelicos/contact-list',
    title: 'Clist',
    description: 'A contacts utility',
    keywords: ['express', 'idb', 'bootstrap'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a user, I want to be able to install the web application as a PWA. I want to be able to add and remove my contact cards.', "As a developer, I want all my scripts to run from the root directory package.json. I want to be able to run npm run start in the command line and have both my client and server start. I want to be able to run npm run start:prod in the command line to run our build script and start our server. I want to be able to run npm run server in the command line and have just our server start without the client. I want to be able to run npm run build in the command line and have our client run the webpack build script. I want to be able to run npm run install in the command line and have all of the client's dependencies installed. I want to be able to run npm run client in the command line and have just our client start without the server."],
    businessRequirements: ['The application uses webpack for bundling.', 'The application uses a service worker to cache static assets.', 'The application uses IndexedDB GET, ADD, and DELETE methods.', 'The application uses object store for async/await.', 'The application uses CSS loaders.', "Scripts are placed in the root and client directory's `package.json`.", '`npm run start` starts both the client and server.', '`npm run start:prod` runs the `build` script and starts the server.', '`npm run server` starts just the server and not the client.', '`npm run build` runs the webpack build script in the client.', '`npm run install` installs the dependencies for the client.', '`npm run client` starts the client without the server.', 'The web application can be installed from the web address provided by Heroku.', 'The web application is deployed using Heroku.'],
    changes: [],
    apis: [],
    frontEndTech: ['idb'],
    backEndTech: ['express'],
    element: null
  },
  txtly: {
    endpoint: 'txtly',
    link: 'https://leoelicos-jate.herokuapp.com/',
    code: 'https://github.com/leoelicos/progressive-text-editor',
    title: 'Txtly',
    description: 'An offline text editor',
    keywords: ['pwa', 'express', 'idb'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a developer, I want to create a note-taking application that allows users to create notes or code snippets, with or without an internet connection, so that they can reliably retrieve them for later use. The app should have the following features: The ability to create new notes, The ability to edit existing notes, The ability to delete notes, The ability to view a list of all notes, The ability to search for specific notes, The ability to save notes locally on the device, even without an internet connection, The ability to sync notes with a remote server when an internet connection is available., The app should be developed with a user-friendly interface and should use modern technologies that enable seamless synchronization between devices.'],
    businessRequirements: [
      'The application should have a client server folder structure',
      'The application should start up the backend and serve the client when `npm run start` is run from the root directory',
      'The JavaScript files should be bundled using webpack',
      'There should be a generated HTML file, service worker, and manifest file when webpack plugins are run',
      'The text editor should still function in the browser without errors when next-gen JavaScript is used in the application',
      'IndexedDB should immediately create a database storage when the text editor is opened',
      'The content in the text editor should be saved with IndexedDB when content is entered and subsequently clicked off of the DOM window',
      'The content in the text editor should be retrieved from our IndexedDB when the text editor is reopened after closing it',
      'The web application should be downloaded as an icon on the desktop when the Install button is clicked',
      'The static assets should be pre cached upon loading along with subsequent pages and static assets when a service worker is registered',
      'There should be proper build scripts for a webpack application when deployed to Heroku'
    ],
    changes: [],
    apis: [],
    frontEndTech: ['code-mirror-themes', 'idb'],
    backEndTech: ['express'],
    element: null
  },
  wants: {
    endpoint: 'wants',
    link: '/wants',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/Wants',
    title: 'Wants',
    description: 'A bucket list',
    keywords: ['react'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a user, I want to be able to enter a bucket-list item. I also want to be able to set the eagerness level of a bucket-list item. After adding a bucket-list item, I want to see a list of all my bucket-list items with colors that identify their eagerness level. Finally, I want to be able to edit and delete bucket-list items.'],
    businessRequirements: ['Write logic to add a bucket-list item in `components/BucketList.js`', 'Write logic to mark a bucket-list item as complete or incomplete', 'Write logic to remove a bucket-list item from the list', 'Write logic to update a bucket-list item in `components/Bucket.js`', 'Write logic that will render a list of bucket-list items using `.map`', 'Each bucket-list item has a color that corresponds to the priority or "eagerness" to complete', 'Each bucket-list item renders a button to edit and delete the item'],
    changes: ['I refactored the React to be more modular and maintainable'],
    apis: [],
    frontEndTech: ['react'],
    backEndTech: [],
    element: <Wants />
  },

  votr: {
    endpoint: 'votr',
    link: 'https://tech-battle.herokuapp.com/',
    code: 'https://github.com/leoelicos/tech-battle',
    title: 'Votr',
    description: 'A voting application',
    keywords: ['graphql', 'react', 'mongoose'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a user, I want to see a list of technology matchups.', 'As a user, I want to be able to create a new matchup between two technologies.', 'As a user, I want to be able to vote for one of the two technologies in the matchup.', 'As a user, I want to see the current number of votes for each technology in the matchup.', "As a user, if I reach a page that doesn't exist, I want to see a 404 page."],
    businessRequirements: ['The `/` homepage route renders a list of technologies', 'The `/matchup` route renders a form to choose two technologies to create a matchup', 'The `/matchup/:id` route renders a matchup to vote on', 'An Apollo Server is set up to use GraphQL queries and mutations to fetch and modify data, replacing the existing RESTful API', 'Apollo Client is set up so that requests can communicate with an Apollo Server', "A 404 page `NotFound` is rendered if the user tries to access a page that doesn't exist"],
    changes: [],
    apis: [],
    frontEndTech: ['@apollo/client', 'graphql', 'react', 'react-dom', 'react-router-dom'],
    backEndTech: ['@apollo/server', 'body-parser', 'cors', 'express', 'graphql', 'graphql-tag', 'http', 'mongoose'],
    element: null
  },

  vroom: {
    endpoint: 'vroom',
    link: 'https://digital-garage.herokuapp.com/',
    code: 'https://github.com/leoelicos/digital-garage',
    title: 'Vroom',
    description: 'A car tracker',
    keywords: ['react', 'redux'],
    background1: [255, 214, 201],
    background2: [255, 249, 247],
    color1: [181, 95, 38],
    color2: [255, 255, 255],
    userStory: ['As a developer, I want to refactor an application that currently uses the Context API, so that it can handle state management using the open source JavaScript library Redux.'],
    businessRequirements: ['Import `{ createStore }` from `redux`', 'Import `reducers` from `./reducers`', 'Create a default export of `createStore` that accepts an argument of `reducers`', 'In `/utils/CarContext.js` import `{ Provider }` from `react-redux` and `store` from `./store`', 'Refactor the `CarProvider` component so that it returns `<Provider>` with an attribute of `store`, set to the value of `store`', 'Clean up any unused code left over from the React Hooks', 'Run the application, using `npm run start`, to ensure that functionality is unchanged for the end user'],
    changes: [],
    apis: [],
    frontEndTech: ['react', 'react-dom', 'react-redux', 'react-scripts', 'redux'],
    backEndTech: [],
    element: null
  },
  algoz: {
    endpoint: 'algoz',
    link: '/algoz',
    code: 'https://github.com/leoelicos/bcs/tree/main/src/pages/Algoz',
    title: 'AlgoZ',
    description: 'A collection of algorithms',
    keywords: ['react', 'prism', 'algorithms'],
    background1: [125, 188, 234],
    background2: [255, 255, 255],
    color1: [34, 42, 53],
    color2: [255, 255, 255],
    userStory: ['Implement bubble sort', 'Implement quick sort', 'Implement merge sort'],
    businessRequirements: ['lorem lorem lorem lorem lorem lorem lorem lorem lorem lorem '],
    changes: ['I replaced the original three algorithms (Merge Sort, Bubble Sort, Binary Sort) to my own collection of LeetCode algorithms', 'I added links to LeetCode questions', 'I added Prism rendering of Javascript'],
    apis: [],
    frontEndTech: ['react', 'prism'],
    backEndTech: [],
    element: <Algoz />
  }
}
export default appData
